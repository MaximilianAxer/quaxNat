fun
}
quax.formula <- function(formula, data, tau, fun=lognormal,
subset, weights, na.action, offset, ...) {
cl <- match.call(expand.dots=FALSE)
cl <- cl[c(1L, match(c("formula","data","subset","weights",
"na.action","offset"), names(cl), 0L))]
cl[[1L]] <- quote(stats::model.frame)
cl$formula[[3L]] <- substitute(0+x, list(x=formula[[3L]]))
mf <- eval.parent(cl)
x <- model.matrix(attr(mf,"terms"), mf)
y <- mf[[1L]]
if (ncol(x)!=1L || !is.vector(y))
stop("both sides of ~ must be numeric vectors")
o <- model.offset(mf)
w <- model.weights(mf)
quax.default(x=as.vector(x), y=if (is.null(o)) y else y-o,
tau=tau, fun=fun, weights=if (is.null(w)) 1 else w, ...)
}
summary.quax <- function(f)
list(coef=formals(f)$par, value=attr(f,"o")$value)
#the function assumed for the dispersal distance distribution.
#'objective function for minimization
#'
#'
#'@param x represents the distance to the nearest seed source. Must be numeric
#'@param fun dispersal function, which is used
#'@param par are parameters to be estimated
#'@param tau determines the quantile
#'@param y response: regeneration density in corresponding unit (per ha)
#'
#'@description  The parameters are estimated by minimizing a sum of weighted absolute errors, where y_1,...,y_n are the observed regeneration numbers and x_1,...,x_n,η_1,...,η_n are defined as above.
#' While common regression approaches assume that the average error in the model is zero, the errors are asymmetrically weighted for quantile regression (see Fahrmeir et al., 2013, Ch. 10).
#' The objective function is defined and the sum of absolute weighted errors is minimized.
#' \deqn{\sum_{i=1}^n x_i w_i |y_i - \eta_i|}
#'@details
S <- function(par, x, y, tau, w, fun) {
res <- y - fun(x, par)
s <- tau - 0.5 + 0.5*sign(res)
result <- sum(w * s * res, na.rm=TRUE)
return(result)
}
#S(y = 1,  x = 1, par = 1:3, tau = 0.99,  fun = "l")
#' predict_quax
#'
#' @description Prediction of the potential regeneration density as a function of the distance to the nearest seed tree.
#'
#'
#'
#' @param distmap An object of the Distmap-Function. A SpatRaster with distances to the nearest seed tree is used for the prediction of the potential regeneration densities.
#' @param quax An quax object is used for the prediction. This is a parameterised dispersal function using quantile regression.
#'
#' @details A SpatRaster is created with the same resolution as the input raster, defined by the study area. The potential regeneration density is calculated and given for each raster cell.
#'
#' @return  The regeneration density is given in N/ha.
#'
predict_quax <- function(distmap, quax) {
prediction <- quax(distmap)
return(prediction)
}
?Clark2dt
?geometric
?lognormal
?lognormal.log
?Weibull
?exponential.power
library(quaxNat)
?exponential.power
?exponential.power
library(quaxNat)
?exponential.power
library(quaxNat)
library(quaxNat)
library(quaxNat)
library(quaxNat)
##############################################################################
#' Dispersal Densities For Log-Normal Distance Distributions
#'
#' `lognormal` computes the value, multiplied by \eqn{N}, of a dispersal
#' function based on seeds having a distance with a log-normal distribution
#' from the their source.
#'
#' @return Numeric vector of function values multiplied by \eqn{N}.
#'
#' @param par Numeric vector with three elements representing log-transformed
#' scale and shape parameters, given by the mean \eqn{a} and standard
#' deviation \eqn{\sigma} of the underlying normal distribution, and the
#' scaling \eqn{N}.
#' @param x represents the distance to the nearest seed source. Must be
#' numeric.
#'
#' @details The spatial dispersal density, representing the probability
#' density function, divided by \eqn{2\pi x}, of the distance of a seed from
#' its source, is here given by
#' \deqn{f(x) = \frac{1}{2\pi x^2 \sqrt{2\pi\sigma^2}}
#'   e^{-\frac{1}{2\sigma^2}(\log(x/a))^2},}
#' see Greene and Johnson (1989), Stoyan and Wagner (2001). Thus, the
#' distance is assumed to have the log-normal distribution such that the
#' log-distance has a normal distribution with mean \eqn{a} and variance
#' \eqn{\sigma^2}. Note that \eqn{\log f(x)} is a quadratic function of
#' \eqn{\log x} with a maximum at \eqn{\log a-2\sigma^2}.
#'
#' Particularly suitable if the maximum regeneration density is not
#' directly at the seed source (e.g. Janzen-Conell effect)(Nathan et al. 2012)
#'
#' @references
#' Greene, D.F., Johnson, E.A. (1989). A model of wind dispersal of winged or
#' plumed seeds. *Ecology* **70**(2), 339–347.
#' \doi{10.2307/1937538}
#'
#' Stoyan, D., Wagner, S. (2001). Estimating the fruit dispersion of
#' anemochorous forest trees. *Ecol. Modell.* **145**, 35–47.
#' \doi{10.1016/S0304-3800(01)00385-4}
#'
#' Nathan, R., Klein, E., Robledo‐Arnuncio, J. J., & Revilla, E. (2012)
#' Dispersal kernels:
#' Review In Colbert J., Baguette M., Benton TG & Bullock JM (Eds.),
#' *Dispersal ecology and evolution* 186–210.
lognormal <- function(x, par) {
log.a <- par[1]
σ <- exp(par[2])
N <- par[3]
result <- N * exp(-(log(x)-log.a)^2/(2*σ^2)) / (2*pi * sqrt(2*pi*σ^2) * x^2)
return(result)
}
##############################################################################
#' Dispersal Densities From 2-Dimensional t Distribution
#'
#' `Clark2dt` computes the value of the dispersal function from Clark et al.
#' (1999) multiplied by \eqn{N}.
#'
#' @return Numeric vector of function values multiplied by \eqn{N}.
#'
#' @param par Numeric vector with three elements representing the
#' log-transformed parameters \eqn{a} and \eqn{p} and the scaling \eqn{N}.
#' @param x Numeric vector of distances to the nearest seed source.
#'
#' @details The spatial dispersal density, representing the probability
#' density function, divided by \eqn{2\pi x}, of the distance of a seed from
#' its source, is here given by
#' \deqn{f(x) = \frac{p}{\pi a^2 (1+(x/a)^2)^{p+1}},}
#' see Clark et al. (1999) and Austerlitz et al. (2004) (with
#' parameterizations \eqn{a=\sqrt{u}} and \eqn{p=b-1}, respectively). This
#' represents a mixture of Gaussian densities that exhibits heavier tails. It
#' has its maximum at zero.
#'
#' @references
#' Clark, J.S., Silman, M., Kern, R., Macklin, E., HilleRisLambers, J.
#' (1999). Seed dispersal near and far: patterns across temperate and tropical
#' forests. *Ecology* **80**, 1475–1494.
#' \doi{10.1890/0012-9658(1999)080[1475:SDNAFP]2.0.CO;2}
#'
#' Austerlitz, F., Dick, C.W., Dutech, C., Klein, E.K., Oddou-Muratorio, S.,
#' Smouse, P.E., Sork, V.L. (2004). Using genetic markers to estimate the
#' pollen dispersal curve. *Molecular Ecology* **13**, 937–954.
#' \doi{10.1111/j.1365-294X.2004.02100.x}
Clark2dt <- function(x, par){
a <- exp(par[1])
p <- exp(par[2])
N <- par[3]
result <- N * p / (pi*a^2 * (1+(x/a)^2) ^ (p+1))
return(result)
}
##############################################################################
#' Dispersal Densities From Exponential Power Family
#'
#' `exponential.power` computes the value, multiplied by \eqn{N}, of
#' dispersal function from the exponential power family, which includes, as
#' special cases, distance distributions based on normal and exponential
#' distributions.
#'
#' @return Numeric vector of function values multiplied by \eqn{N}.
#'
#' @param par Numeric vector with three elements representing the
#' log-transformed scale and shape parameters \eqn{a} and \eqn{b} of the
#' dispersal density, and a the scaling \eqn{N}.
#' @param x represents the distance to the nearest seed source. Must be
#' numeric.
#'
#' @details The spatial dispersal density, representing the probability
#' density function, divided by \eqn{2\pi x}, of the distance of a seed from
#' its source, is here given by
#' \deqn{f(x) = \frac{b}{2\pi a^2\Gamma(2/b)} e^{-(x/a)^b},}
#' see Bateman (1947), Clark et al. (1998), Austerlitz et al. (2004). This
#' function has its maximum at zero and represents a rather flexible family
#' of distributions including the classical bivariate Gaussian kernels, the
#' kernels based on an exponential distribution of distances, and, for
#' \eqn{b<1}, fat-tailed distributions. For \eqn{b>1}, it shows thin-tailed distributions.
#' It has consequently been applied in a number of theoretical studies that
#' address dispersal (Ribbens et al. 1994; Bullock et al. 2017).
#'
#' @references
#' Bateman, A. (1947). Contamination in seed crops: III. relation with
#' isolation distance. *Heredity* **1**, 303–336.
#' \doi{10.1038/hdy.1947.20}
#'
#' Ribbens, E., Silander Jr, J. A., & Pacala, S. W.  (1994). CSeedling recruitment in forests:
#'  calibrating models to predict patterns of tree seedling dispersion. *Ecology* **75**, 1794-1806.
#' \doi{10.2307/1939638}
#'
#' Clark, J.S., Macklin, E., Wood, L. (1998). Stages and spatial scales of
#' recruitment limitation in southern Appalachian forests. *Ecological
#' Monographs* **68**(2), 213–235.
#' \doi{10.2307/2657201}
#'
#' Clark, J.S. (1998). Why trees migrate so fast: confronting theory with
#' dispersal biology and the paleorecord. *The American Naturalist*
#' **152**(2), 204–224.
#' \doi{10.1086/286162}
#'
#' Austerlitz, F., Dick, C.W., Dutech, C., Klein, E.K., Oddou-Muratorio, S.,
#' Smouse, P.E., Sork, V.L. (2004). Using genetic markers to estimate the
#' pollen dispersal curve. *Molecular Ecology* **13**, 937–954.
#' \doi{doi.org/10.1111/j.1365-294X.2004.02100.x}
#'
#' #'Bullock, J. M., Mallada González, L., Tamme, R., Götzenberger, L., White, S. M., Pärtel, M., Hooftman, D. A.
#' (2017).  A synthesis of empirical plant dispersal kernels.
#' *Journal of Ecology* **105**, 6-19.
#' \doi{doi.org/10.1111/1365-2745.12666}
#'
exponential.power <- function(x, par) {
a <- exp(par[1])
b <- exp(par[2])
N <- par[3]
N * b / (2*pi*a^2*gamma(2/b)) * exp(-(x/a)^b)
}
##############################################################################
#' Dispersal Densities From Weibull Family
#'
#' `Weibull` computes the value of the dispersal function from Tufto et al.
#' (1997) multiplied by \eqn{N}.
#'
#' @return Numeric vector of function values multiplied by \eqn{N}.
#'
#' @param par Numeric vector with three elements representing the
#' log-transformed parameters \eqn{a} and \eqn{b} and the scaling \eqn{N}.
#' @param x Numeric vector of distances to the nearest seed source.
#'
#' @details The spatial dispersal density, representing the probability
#' density function, divided by \eqn{2\pi x}, of the distance of a seed from
#' its source, is here given by
#' \deqn{f(x) = \frac{a^{-b}b}{2\pi} (\frac{x}{a})^{b-2} e^{-(x/a)^b},}
#' see Tufto et al. (1997), Austerlitz et al. (2004).
#' The distribution is fat-tailed when \eqn{b<1} and
#' thin-tailed otherwise (Nathan et al. 2012).
#' For \eqn{b>1}, the mode of the function is at \eqn{x>1}. In this way, the function approaches the normal distribution.
#'
#' @references
#' Tufto, J., Engen, S., Hindar, K. (1997). Stochastic dispersal processes in
#' plant populations, *Theoretical Population Biology* **52**(1), 16–26.
#' \doi{10.1006/tpbi.1997.1306}
#'
#' Austerlitz, F., Dick, C.W., Dutech, C., Klein, E.K., Oddou-Muratorio, S.,
#' Smouse, P.E., Sork, V.L. (2004). Using genetic markers to estimate the
#' pollen dispersal curve. *Molecular Ecology* **13**, 937–954.
#' \doi{10.1111/j.1365-294X.2004.02100.x}
#'
#' #' Nathan, R., Klein, E., Robledo‐Arnuncio, J. J., & Revilla, E. (2012)
#' Dispersal kernels:
#' Review In Colbert J., Baguette M., Benton TG & Bullock JM (Eds.),
#' *Dispersal ecology and evolution* 186–210.
Weibull <- function(x, par) {
a <- exp(par[1])
b <- exp(par[2])
N <- par[3]
N * a^-b * b / (2*pi) * (x/a)^(b-2) * exp(-(x/a)^b)
}
##############################################################################
#' Dispersal Densities From Geometric Family
#'
#' `geometric` computes the value of the dispersal function from (WHERE?)
#' multiplied by \eqn{N}.
#'
#' @return Numeric vector of function values multiplied by \eqn{N}.
#'
#' @param par Numeric vector with three elements representing the
#' log-transformed parameters \eqn{a} and \eqn{b} and the scaling \eqn{N}.
#' @param x represents the distance to the nearest seed source. Must be
#' numeric.
#'
#' @details The spatial dispersal density, representing the probability
#' density function, divided by \eqn{2\pi x}, of the distance of a seed from
#' its source, is here given by
#' \deqn{f(x) = \frac{(b-2)(b-1)}{2\pi a} (1+\frac{x}{a})^{-b},}
#' see Austerlitz et al. (2004). (CHANGE THE FOLLOWING, SHOULD BE OUR OWN
#' CHARACTERIZATION:) Austerlitz et al. (2004) characterize it as follows:
#' The geometric and 2dt families “will behave quite differently from the
#' exponential and Weibull distributions. They show a fat tail, whatever the
#' value of the shape parameter (\eqn{b}), and the distributions become
#' increasingly fat-tailed as \eqn{b} declines toward ‘1’.”
#'
#' @references
#' (FIND AND ADD ORIGINAL REFERENCE)
#'
#' Austerlitz, F., Dick, C.W., Dutech, C., Klein, E.K., Oddou-Muratorio, S.,
#' Smouse, P.E., Sork, V.L. (2004). Using genetic markers to estimate the
#' pollen dispersal curve. *Molecular Ecology* **13**, 937–954.
#' \doi{doi.org/10.1111/j.1365-294X.2004.02100.x}
geometric <- function(x, par) {
a <- exp(par[1])
b <- exp(par[2])
N <- par[3]
N * (b-2)*(b-1) / (2*pi*a) * (1+x/a)^-b
}
##############################################################################
##' Clark2DT-Function
##'
##' @details
##'
##' @return what is returned by the function?
##'
##' @param par parameters U, P, N estimated within the Clark2DT function
##' @param x represents the distance to the nearest seed source. Must be
##' numeric
##'
##' @details Mixture of Gaussian nuclei that produces tails that are not
##' quite as long. Maximum at seed tree itself and cannot become 0 at x = 0.
#Clark2dt <- function(x, par){
#  U <- par[1]
#  P <- par[2]
#  N <- par[3]
#  result <- N * ((P)/ (pi*U * ((1+((x^ 2) / U)) ^ (P + 1))))
#  return(result)
#}
#
##'Function selection
##' param x represents the distance to the nearest seed source. Must be
##' numeric
##' param par are parameters to be estimated
#
#S.functions <- function(x, par, fun){
#  fun <- match.arg(fun,
#                   c("Clark2dt",
#                     "lognormal"))
#  f <- get(fun)
#  result <- f(x, par)
#  return(result)
#}
library(quaxNat)
#' optN
#' @description  For given a,σ the global minimum in N can always be found with any desired precision, usually in a small number of steps, by successively shrinking an interval. We realize this as an inner, nested minimization in the function optN.
#'
#'
#' @inheritParams S
#'
#'
optN <- function(par, nframe, tol, ...) {
Nmax <- get("Nmax", sys.frame(nframe))
s <- S(c(par, N=0), ...)
while (S(c(par, Nmax), ...) < s) {
Nmax <- 2*Nmax
}
oN <- optimize(function(N) S(c(par, N), ...),
c(0, Nmax), tol=tol)
assign("Nmax", (Nmax+oN$minimum)/2, sys.frame(nframe))
obj <- oN$objective
attr(obj,"N") <- oN$minimum
obj
}
#optN(par = 1:3, x = 1, y = 1, tau = 0.9, fun = "Clark2dt") # dauert sehr lange???
##'SN
##' @inheritParams optN
##'
#SN <- function(x, y, tau, fun, w, par, Nmax = 1000000) { # Search for the minimum of the reduced objective
#  oN <- optN(x=x, y=y, tau=tau, fun=fun, w=w, par=par, Nmax=Nmax)
#  cat("par =", par, "objective =", oN$objective, "N =", oN$minimum, "\n"); flush.console()
#  oN$objective
#}
#'quax
#'
#'@description The dispersal function for estimating the potential regeneration density in the 2-dimensional space.
#'
#'
#' @param x Numeric vector giving the distance to the nearest seed source for the inventory plot.
#' @param y Observed regeneration density of the inventory plot.
#' @param tau Numeric between 0 and 1. Specifies the quantile used for the quantile regression. {0;1}
#' @param fun Function assumed for the quantile regression of the regeneration potential. Values allowed are: "exponential.power.log", "weibull.log", "gamma", "Clark2dt.log", "lognormal", "geometric.log". The default is to fit an lognormal model.
#' @param weights Numeric vector of weights of the observations in the estimation procedure. Default is 0.
#' @param par Numeric vector of initial values for the parameters to be optimized over, exluding the first parameter `N`.
#' @param ... Further arguments passed to `optim`.
#' @param formula A formula of the form `y ~ x`.
#' @param data,subset,weights,na.action,offset For the formula interface: Further arguments passed to `model.frame` (along with `weights`).
#' @param tol The desired accuracy for the inner optimization, see `optimize`.
#' @details The function return a list including the estimated parameters for the quantile regression for the specific distribution function.
#'
#' @return The estimated function, including an attribute `o` containing the results of `optim`.
quax <- function(...) UseMethod("quax")
quax.default <- function(x, y, tau, fun=lognormal,
weights=1, par=c(log.a=8, log.b=1), ..., tol=1e-50) {
Nmax <- 2*sum(y)        # This number will be read and modified by the
nframe <- sys.nframe()  #   inner optimization (referenced via nframe).
o <- optim(par, optN, nframe=nframe, tol=tol,
x=x, y=y, tau=tau, fun=fun, w=weights, ...)
obj <- optN(par=o$par, nframe=nframe, tol=tol,
x=x, y=y, tau=tau, fun=fun, w=weights)
formals(fun)$par <- c(o$par, N=attr(obj,"N"))
attr(fun,"o") <- o
class(fun) <- "quax"
fun
}
quax.formula <- function(formula, data, tau, fun=lognormal,
subset, weights, na.action, offset, ...) {
cl <- match.call(expand.dots=FALSE)
cl <- cl[c(1L, match(c("formula","data","subset","weights",
"na.action","offset"), names(cl), 0L))]
cl[[1L]] <- quote(stats::model.frame)
cl$formula[[3L]] <- substitute(0+x, list(x=formula[[3L]]))
mf <- eval.parent(cl)
x <- model.matrix(attr(mf,"terms"), mf)
y <- mf[[1L]]
if (ncol(x)!=1L || !is.vector(y))
stop("both sides of ~ must be numeric vectors")
o <- model.offset(mf)
w <- model.weights(mf)
quax.default(x=as.vector(x), y=if (is.null(o)) y else y-o,
tau=tau, fun=fun, weights=if (is.null(w)) 1 else w, ...)
}
summary.quax <- function(f)
list(coef=formals(f)$par, value=attr(f,"o")$value)
#'objective function for minimization
#'
#'
#'@param x represents the distance to the nearest seed source. Must be numeric
#'@param fun dispersal function, which is used
#'@param par are parameters to be estimated
#'@param tau determines the quantile
#'@param y response: regeneration density in corresponding unit (per ha)
#'
#'@description  The parameters are estimated by minimizing a sum of weighted absolute errors, where y_1,...,y_n are the observed regeneration numbers and x_1,...,x_n,η_1,...,η_n are defined as above.
#' While common regression approaches assume that the average error in the model is zero, the errors are asymmetrically weighted for quantile regression (see Fahrmeir et al., 2013, Ch. 10).
#' The objective function is defined and the sum of absolute weighted errors is minimized.
#' \deqn{\sum_{i=1}^n x_i w_i |y_i - \eta_i|}
#'@details
S <- function(par, x, y, tau, w, fun) {
res <- y - fun(x, par)
s <- tau - 0.5 + 0.5*sign(res)
result <- sum(w * s * res, na.rm=TRUE)
return(result)
}
#S(y = 1,  x = 1, par = 1:3, tau = 0.99,  fun = "l")
#' predict_quax
#'
#' @description Prediction of the potential regeneration density as a function of the distance to the nearest seed tree.
#'
#'
#'
#' @param distmap An object of the Distmap-Function. A SpatRaster with distances to the nearest seed tree is used for the prediction of the potential regeneration densities.
#' @param quax An quax object is used for the prediction. This is a parameterised dispersal function using quantile regression.
#'
#' @details A SpatRaster is created with the same resolution as the input raster, defined by the study area. The potential regeneration density is calculated and given for each raster cell.
#'
#' @return  The regeneration density is given in N/ha.
#'
predict_quax <- function(distmap, quax) {
prediction <- quax(distmap)
return(prediction)
}
setwd("C:/Users/maxer/Downloads" )
VJ_pot <- read.csv2("VJ_pot.csv", fileEncoding="latin1")
str(VJ_pot)
plot(VJ_pot$distance_dgl, VJ_pot$Dgl_B0 * 10000/(pi/4*6^2),
xlab = "Distanz zur nächsten Douglasie [m]",
ylab = "Verjüngungsdichte Douglasie B0 [N/ha]",
ylim = c(0,11000), xlim = c(0,700))
f1 <- quax(Dgl_B0 ~ distance_dgl, VJ_pot, weights=distance_dgl^0, tau=0.9998, fun=lognormal)
f2 <- quax(Dgl_B0 ~ distance_dgl, VJ_pot, weights=distance_dgl^0, tau=0.9998, fun=Clark2dt)
plot(Dgl_B0 ~ distance_dgl, VJ_pot)
curve(f1(x), add=TRUE, n=10000, col="forestgreen")
curve(f2(x), add=TRUE, n=10000, col="red")
attr(f1,"o")$value
attr(f2,"o")$value
summary(f2)
summary.quax(f1)
summary.quax(f2)
f2
f1
list(coef=formals(f1)$par, value=attr(f1,"o")$value)
f1
list(coef=formals(f1)$par, value=attr(f1,"o")$value)
cat(list(coef=formals(f1)$par, value=attr(f1,"o")$value))
f1
attr(f1, function)
attr(f1)
attr(f1,"o")
formals(f1)
f1
list(coef=formals(f1)$par, value=attr(f1,"o")$value)
summary.quax(f2)
summary.quax(f1)
summary.quax(f2)
formals(f1)
cat(f1)
attr(f1)
?attr
class(f1)
comment(f1)
dimnames(f1)
library(mgcv)
mgcv::summary.gam()
mgcv:::summary.gam()
?mgcv::summary.gam()
list(coef=formals(f1)$par, value=attr(f1,"o")$value)
coef=formals(f1)$par
formals(f1)$par
list(coefficients=formals(f1)$par, value=attr(f1,"o")$value)
cat(coefficients=formals(f1)$par, value=attr(f1,"o")$value)
attr(coefficients=formals(f1)$par, value=attr(f1,"o")$value)
cat(coefficients=formals(f1)$par, value=attr(f1,"o")$value)
devtools::install_github("https://github.com/apferreira/dispfit")
library(dispfit)
devtools::install_github("https://github.com/apferreira/dispfit")
library(dispfit)
